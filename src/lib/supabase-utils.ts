import { supabase } from '@/integrations/supabase/client';
import type { Session, User } from '@supabase/supabase-js';

/**
 * Verifica se h√° uma sess√£o ativa de forma segura
 */
export const checkSession = async (): Promise<Session | null> => {
  try {
    console.log('üîç Verificando sess√£o...');
    
    const { data: { session }, error } = await supabase.auth.getSession();
    
    if (error) {
      console.warn('‚ö†Ô∏è Erro ao verificar sess√£o:', error.message);
      return null;
    }
    
    if (session) {
      console.log('‚úÖ Sess√£o ativa encontrada para:', session.user.email);
      return session;
    } else {
      console.log('‚ÑπÔ∏è Nenhuma sess√£o ativa encontrada');
      return null;
    }
  } catch (error) {
    console.error('üí• Erro inesperado ao verificar sess√£o:', error);
    return null;
  }
};

/**
 * Executa uma fun√ß√£o com autentica√ß√£o opcional
 * Se n√£o houver sess√£o, retorna o fallback
 */
export const withOptionalAuth = async <T>(
  fn: () => Promise<T>,
  fallback: T
): Promise<T> => {
  try {
    const session = await checkSession();
    
    if (!session) {
      console.log('üìù Sem sess√£o - usando fallback');
      return fallback;
    }
    
    return await fn();
  } catch (error) {
    console.warn('‚ö†Ô∏è Erro na execu√ß√£o com auth opcional:', error);
    return fallback;
  }
};

/**
 * Executa uma fun√ß√£o que requer autentica√ß√£o
 * Lan√ßa erro se n√£o houver sess√£o
 */
export const withRequiredAuth = async <T>(
  fn: () => Promise<T>
): Promise<T> => {
  const session = await checkSession();
  
  if (!session) {
    throw new Error('Autentica√ß√£o necess√°ria para esta opera√ß√£o');
  }
  
  return await fn();
};

/**
 * Verifica se o usu√°rio atual √© admin
 */
export const isCurrentUserAdmin = async (): Promise<boolean> => {
  try {
    const session = await checkSession();
    
    if (!session) {
      return false;
    }
    
    // Verificar na tabela profiles
    const { data: profile } = await supabase
      .from('profiles')
      .select('role')
      .eq('id', session.user.id)
      .single();
    
    return profile?.role === 'admin';
  } catch (error) {
    console.warn('‚ö†Ô∏è Erro ao verificar se √© admin:', error);
    return false;
  }
};

/**
 * Obt√©m o usu√°rio atual de forma segura
 */
export const getCurrentUser = async (): Promise<User | null> => {
  try {
    const session = await checkSession();
    return session?.user || null;
  } catch (error) {
    console.error('üí• Erro ao obter usu√°rio atual:', error);
    return null;
  }
};

/**
 * Verifica se h√° conex√£o com o Supabase
 */
export const checkSupabaseConnection = async (): Promise<boolean> => {
  try {
    const { data, error } = await supabase
      .from('profiles')
      .select('count')
      .limit(1);
    
    return !error;
  } catch (error) {
    console.error('üí• Erro de conex√£o com Supabase:', error);
    return false;
  }
};