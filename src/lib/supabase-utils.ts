import { supabase } from '@/lib/supabase';
import type { Session, User } from '@supabase/supabase-js';

/**
 * Verifica se h√° uma sess√£o ativa de forma segura
 */
export const checkSession = async (): Promise<Session | null> => {
  try {
    console.log('üîç Verificando sess√£o...');
    
    const { data: { session }, error } = await supabase.auth.getSession();
    
    if (error) {
      console.warn('‚ö†Ô∏è Erro ao verificar sess√£o:', error.message);
      return null;
    }
    
    if (session) {
      console.log('‚úÖ Sess√£o ativa encontrada para:', session.user.email);
      return session;
    } else {
      console.log('‚ÑπÔ∏è Nenhuma sess√£o ativa encontrada');
      return null;
    }
  } catch (error) {
    console.error('üí• Erro inesperado ao verificar sess√£o:', error);
    return null;
  }
};

/**
 * Verifica conex√£o com o Supabase - VERS√ÉO MELHORADA
 */
export const checkSupabaseConnection = async (): Promise<boolean> => {
  try {
    console.log('üåê Verificando conex√£o com Supabase...');
    
    // Teste 1: Verificar se consegue fazer uma query b√°sica no auth
    try {
      const { data: { session }, error: sessionError } = await supabase.auth.getSession();
      
      if (!sessionError) {
        console.log('‚úÖ Conex√£o com Auth confirmada');
        return true;
      } else {
        console.warn('‚ö†Ô∏è Erro no Auth:', sessionError.message);
      }
    } catch (authError) {
      console.warn('‚ö†Ô∏è Erro no teste de Auth:', authError);
    }
    
    // Teste 2: Fallback - tentar uma opera√ß√£o muito b√°sica
    try {
      // Tentar acessar qualquer endpoint do Supabase
      const response = await fetch(`${supabase.supabaseUrl}/rest/v1/`, {
        method: 'HEAD',
        headers: {
          'apikey': supabase.supabaseKey,
          'Authorization': `Bearer ${supabase.supabaseKey}`
        }
      });
      
      if (response.ok || response.status === 404 || response.status === 401) {
        // 404 ou 401 significa que o servidor est√° respondendo
        console.log('‚úÖ Conex√£o b√°sica confirmada via fetch');
        return true;
      }
    } catch (fetchError) {
      console.warn('‚ö†Ô∏è Erro no teste de fetch:', fetchError);
    }
    
    // Teste 3: √öltimo recurso - verificar se o objeto supabase existe
    if (supabase && supabase.supabaseUrl && supabase.supabaseKey) {
      console.log('‚úÖ Cliente Supabase configurado corretamente');
      return true;
    }
    
    console.error('‚ùå Todos os testes de conex√£o falharam');
    return false;
    
  } catch (error) {
    console.error('üí• Erro cr√≠tico na verifica√ß√£o de conex√£o:', error);
    // Em caso de erro cr√≠tico, assumir que est√° conectado para n√£o bloquear
    return true;
  }
};

/**
 * Executa uma fun√ß√£o com autentica√ß√£o opcional
 * Se n√£o houver sess√£o, retorna o fallback
 */
export const withOptionalAuth = async <T>(
  fn: () => Promise<T>,
  fallback: T
): Promise<T> => {
  try {
    const session = await checkSession();
    
    if (!session) {
      console.log('üìù Sem sess√£o - usando fallback');
      return fallback;
    }
    
    return await fn();
  } catch (error) {
    console.warn('‚ö†Ô∏è Erro na execu√ß√£o com auth opcional:', error);
    return fallback;
  }
};

/**
 * Executa uma fun√ß√£o que requer autentica√ß√£o
 * Lan√ßa erro se n√£o houver sess√£o
 */
export const withRequiredAuth = async <T>(
  fn: () => Promise<T>
): Promise<T> => {
  const session = await checkSession();
  
  if (!session) {
    throw new Error('Autentica√ß√£o necess√°ria para esta opera√ß√£o');
  }
  
  return await fn();
};

/**
 * Verifica se o usu√°rio atual √© admin
 */
export const isCurrentUserAdmin = async (): Promise<boolean> => {
  try {
    const session = await checkSession();
    
    if (!session) {
      return false;
    }
    
    // Verificar na tabela profiles
    const { data: profile } = await supabase
      .from('profiles')
      .select('role')
      .eq('id', session.user.id)
      .single();
    
    return profile?.role === 'admin';
  } catch (error) {
    console.warn('‚ö†Ô∏è Erro ao verificar se √© admin:', error);
    return false;
  }
};

/**
 * Obt√©m o usu√°rio atual de forma segura
 */
export const getCurrentUser = async (): Promise<User | null> => {
  try {
    const session = await checkSession();
    return session?.user || null;
  } catch (error) {
    console.error('üí• Erro ao obter usu√°rio atual:', error);
    return null;
  }
};

/**
 * Verifica conex√£o de forma mais r√°pida (para uso em componentes)
 */
export const quickConnectionCheck = async (): Promise<boolean> => {
  try {
    // Teste r√°pido apenas no auth
    const { error } = await supabase.auth.getSession();
    return !error;
  } catch (error) {
    console.warn('‚ö†Ô∏è Quick check falhou:', error);
    // Em caso de erro, assumir conectado
    return true;
  }
};

/**
 * For√ßa reconex√£o com o Supabase
 */
export const forceReconnect = async (): Promise<boolean> => {
  try {
    console.log('üîÑ For√ßando reconex√£o...');
    
    // Limpar sess√£o local
    await supabase.auth.signOut();
    
    // Tentar nova conex√£o
    const isConnected = await checkSupabaseConnection();
    
    if (isConnected) {
      console.log('‚úÖ Reconex√£o bem-sucedida');
    } else {
      console.error('‚ùå Falha na reconex√£o');
    }
    
    return isConnected;
  } catch (error) {
    console.error('üí• Erro na reconex√£o:', error);
    return false;
  }
};